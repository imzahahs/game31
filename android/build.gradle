android {
    namespace "com.kaigan.pipedreams"
    signingConfigs {
        config {
            keyAlias 'kaigan'
            keyPassword 'projectISO@03'
//            storeFile file('C:/Users/lorde/Downloads/kaigan_managed.keystore')
            storeFile file('C:/Users/lorde/Downloads/kaigan_managed_simulacra1.jks')
            storePassword 'projectISO@03'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
//    buildToolsVersion "28.0.3"
    //compileSdkVersion 34
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        androidTest.setRoot('tests')
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/robovm/ios/robovm.xml']
        }
    }
    defaultConfig {
        applicationId "com.kaigan.pipedreams"
        minSdkVersion 23
        compileSdk 34
        targetSdkVersion 34
        versionCode 48
        versionName "1.0.48"
        signingConfig signingConfigs.config
        multiDexEnabled true

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }
    }
//    dexOptions {
//        javaMaxHeapSize "4g"
//    }

    splits {
        abi {
            enable true
            reset()
            include  'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }

    buildTypes {
        release {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig true
        renderScript true
        aidl true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '34.0.0'

    assetPacks = [":asset_pack_videoFiles"]

}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
//    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
//        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}


task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr -> properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.kaigan.game31/com.kaigan.pipedreams.AndroidLauncher'
}
//
//// sets up the Android Eclipse project, using the old Ant based build.
//eclipse {
//    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
//    // ignores any nodes added in classpath.file.withXml
//    sourceSets {
//        main {
//            java.srcDirs "src", 'gen'
//        }
//    }
//
//    jdt {
//        sourceCompatibility = 1.6
//        targetCompatibility = 1.6
//    }
//
//    classpath {
//        plusConfigurations += [ project.configurations.implementation ]
//        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
//    }
//
//    project {
//        name = appName + "-android"
//        natures 'com.android.ide.eclipse.adt.AndroidNature'
//        buildCommands.clear();
//        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
//        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
//        buildCommand "org.eclipse.jdt.core.javabuilder"
//        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
//    }
//}
configurations {
    resolvableImplementation.extendsFrom implementation
}
// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src")
        scopes = [COMPILE: [plus: [project.configurations.resolvableImplementation]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance()
                builder.current = node
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value: "true")
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
    implementation project(':core')
}
